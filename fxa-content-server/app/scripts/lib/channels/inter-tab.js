/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

/**
 * This is a special channel that communicates between two
 * tabs of the same browser. It uses localStorage to communicate.
 */

define([
  'crosstab'
], function (crosstab) {
  'use strict';

  function InterTabChannel(options) {
    options = options || {};
    this._crosstab = options.crosstab || crosstab;
  }

  InterTabChannel.prototype = {
    /**
     * Send a message
     *
     * @method send
     * @param {string} name
     * @param {object} [data]
     */
    send: function (name, data) {
      // Sensitive data is sent across the channel and should only
      // be in localStorage if absolutely necessary. Only send
      // data if another tab is listening.
      try {
        if (this._crosstab.util.tabCount() > 1) {
          this._crosstab.broadcast(name, data, null);
        }
      } catch (e) {
        // this can blow up if the browser does not support localStorage
        // or if on a mobile device. Ignore the error.
      }
    },

    /**
     * Register a listener
     *
     * @method on
     * @param {string} name
     * @param {function} callback
     *
     * @return {string} key - key used to unregister a listener
     */
    on: function (name, callback) {
      // crosstab registers callbacks by storing functions by a list
      // of keys. If no key is given, a key is generated by converting the
      // function to a string. This means a given function can only be
      // registered once unless a key is also passed in during registration.
      // Use the current date plus a random number in case two functions are
      // reigstered in the same millisecond.
      var key = Date.now() + Math.random();
      this._crosstab.util.events.on(name, callback, key);
      return key;
    },

    /**
     * Unregister a listener
     *
     * @method off
     * @param {string} name
     * @param {string} key
     */
    off: function (name, key) {
      this._crosstab.util.events.off(name, key);
    },

    /**
     * Clear all inter-tab channel data
     *
     * @method clearMessages
     */
    clearMessages: function () {
      this._crosstab.util.clearMessages();
    }
  };

  return InterTabChannel;
});
